@page "/"
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MessageService Message
<PageTitle>金价监控</PageTitle>

@if (showAlert)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        设置保存成功！将在 <span id="countdown">3</span> 秒后跳转…
    </div>

    <script>
    let countdown = 3;
    const countdownElement = document.getElementById('countdown');

    const timer = setInterval(() => {
        countdown--;
        if (countdown <= 0) {
            clearInterval(timer);
            window.location.href = '@NavigationManager.Uri';
        } else {
            countdownElement.textContent = countdown;
        }
    }, 1000);
    </script>

}
@if (settings == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">加载中…</span>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card">
            <div class="card-body">
                <EditForm Model="settings"
                          OnValidSubmit="SaveSettings"
                          FormName="GoldPriceSettingsForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />
                    <div style="display:none">
                        <Microsoft.AspNetCore.Components.Forms.InputNumber @bind-Value="settings.Id"
                                                                           class="form-control" />
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">上限阈值：</label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber @bind-Value="settings.UpperThreshold"
                                                                               class="form-control" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">下限阈值：</label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber @bind-Value="settings.LowerThreshold"
                                                                               class="form-control" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">更新间隔（秒）：</label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber @bind-Value="settings.UpdateInterval"
                                                                               class="form-control" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">是否通知：</label>
                            <InputSelect @bind-Value="settings.EnableNotification"
                                         class="form-select">
                                <option value="true" selected="@(settings.EnableNotification ? "selected" : null)">是</option>
                                <option value="false" selected="@(!settings.EnableNotification ? "selected" : null)">否</option>
                            </InputSelect>
                        </div>
                    </div>

                    <!-- 新增：是否通知与通知时段 -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">通知时段</label>
                            <div class="d-flex">
                                <InputText type="time"
                                           @bind-Value="settings.NotifyStartTime"
                                           class="form-control me-2" />
                                <InputText type="time"
                                           @bind-Value="settings.NotifyEndTime"
                                           class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">通知地址：</label>
                            <InputText @bind-Value="settings.NotifyPath"
                                       class="form-control" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">通知铃声：</label>
                            <InputSelect @bind-Value="settings.Sound"
                                         class="form-select">
                                <option value="">不响铃</option>
                                @foreach (var sound in Enum.GetValues<Sound>())
                                {
                                    <option value="@sound" selected="@(settings.Sound==sound.ToString() ? "selected" : null)">@sound</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary mt-3">
                        保存设置
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromForm]
    public GoldPriceSettings? settings { get; set; }
    // 添加状态变量
    private bool showAlert = false;
    public List<string> NotifySound = new List<string>();

    protected override void OnInitialized()
    {
        if (settings == null)
        {
            settings = DbContext.GoldPriceSettings.FirstOrDefault();
        }
    }

    private async Task SaveSettings()
    {
        if (settings is not null)
        {
            // 更新或插入逻辑
            var existing = await DbContext.GoldPriceSettings.FindAsync(settings.Id);
            if (existing != null)
            {
                // 将修改复制到已跟踪的实体
                DbContext.Entry(existing).CurrentValues.SetValues(settings);
            }
            else
            {
                DbContext.Add(settings);
            }

            if (await DbContext.SaveChangesAsync() > 0)
            {
                showAlert = true;
            }
        }
    }

    private enum Sound
    {
        alarm,
        anticipate,
        bell,
        birdsong,
        bloom,
        calypso,
        chime,
        choo,
        descent,
        electronic,
        fanfare,
        glass,
        gotosleep,
        healthnotification,
        horn,
        ladder,
        mailsent,
        minuet,
        multiwayinvitation,
        newmail,
        newsflash,
        noir,
        paymentsuccess,
        shake,
        sherwoodforest,
        silence,
        spell,
        suspense,
        telegraph,
        tipties,
        typewriters,
        update
    }
}
